// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  address   String
  city      String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("customers")
}

model Order {
  id                   String      @id @default(uuid())
  orderNumber          String      @unique
  customerId           String
  customer             Customer    @relation(fields: [customerId], references: [id])
  
  // Pickup Details
  pickupDate           DateTime
  deliveryDate         DateTime?
  service              String
  specialInstructions  String?
  
  // Order Status
  status               OrderStatus @default(PENDING)
  totalAmount          Decimal     @db.Decimal(10, 2)
  
  // Timestamps
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  
  // Relations
  orderItems           OrderItem[]
  statusHistory        OrderStatusHistory[]

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(uuid())
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  itemId      String
  itemName    String
  category    String
  serviceType String
  price       Decimal @db.Decimal(10, 2)
  quantity    Int
  subtotal    Decimal @db.Decimal(10, 2)
  
  createdAt   DateTime @default(now())

  @@map("order_items")
}

model OrderStatusHistory {
  id        String      @id @default(uuid())
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())

  @@map("order_status_history")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PICKED_UP
  IN_PROGRESS
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model Service {
  id              String   @id @default(uuid())
  slug            String   @unique
  title           String
  description     String   @db.Text
  fullDescription String   @db.Text
  rating          Float    @default(5.0)
  reviews         Int      @default(0)
  duration        String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  serviceItems    ServiceItem[]

  @@map("services")
}

model ServiceItem {
  id          String  @id @default(uuid())
  serviceId   String
  service     Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  itemId      String  // Original item ID from frontend
  name        String
  description String  @db.Text
  price       Decimal @db.Decimal(10, 2)
  unit        String?
  image       String?
  category    String  // men, women, House-Holds, or custom categories
  
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([serviceId, itemId, category])
  @@map("service_items")
}
